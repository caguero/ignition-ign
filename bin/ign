#!/usr/bin/ruby

# Copyright (C) 2014 Open Source Robotics Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

require 'dl/import'
require 'optparse'
require 'yaml'

# Run the 'execute()' method from an ignition plugin.
module LibExecute
  extend DL::Importer

  commands = {}

  conf_directory = '/usr/share/ignition/'
  conf_directory = ENV['IGN_CONFIG_PATH'] if ENV.key?('IGN_CONFIG_PATH')

  # Check that we have at least one configuration file with ign commands.
  if Dir.glob(conf_directory + '/*.yaml').empty?
    puts 'I cannot find any available "ign" command:'
    puts "\t* Did you install any ignition library?"
    puts "\t* Did you set the IGN_CONFIG_PATH environment variable?"
    exit(-1)
  end

  # Iterate over the list of configuration files.
  Dir.glob(conf_directory + '/*.yaml') do |conf_file|
    next if conf_file == '.' || conf_file == '..'

    # Read the configuration file.
    yml = YAML.load_file(conf_file)
    yml['commands'].each do |cmd|
      cmd.each do |key, value|
        commands[key] = { 'library' => yml['library'], 'description' => value }
      end
    end
  end

  # Debug: show the list of available commands.
  # puts commands

  # Read the command line arguments.
  usage = 'The ign command provides a command line interface to the ignition '\
          "tools.\n\n"\
          "  Usage: ign [options] command\n\n"\
          "List of available commands:\n\n"

  commands.each do |cmd, value|
    usage += cmd + "\t" + value['description'] + "\n"
  end

  usage += "\nUse \"ign help <command>\" to print help for a command"

  OptionParser.new do |opts|
    opts.banner = usage

    opts.on('-h', '--help', 'Show this message') do
      puts opts
      exit(0)
    end
  end.parse!

  # Check that there is at least one command and there is a plugin that knows
  # how to handle it.
  if ARGV.empty? || !commands.key?(ARGV[0])
    puts usage
    exit(-1)
  end

  # Read the plugin that handles the command.
  plugin = commands[ARGV[0]]['library']

  ARGV.insert(0, 'ign')

  dlload plugin
  extern 'void execute(int, char**)'
end

LibExecute.execute(ARGV.size, ARGV.pack('p**'))
